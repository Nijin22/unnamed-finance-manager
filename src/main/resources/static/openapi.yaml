openapi: 3.0.0
info:
  title: Unfima API
  version: 1.0-SNAPSHOT
  description: >-
    The current work-in-progression API documentation for the finance manager
    Unfima. This version of the documentation is a "SNAPSHOT" version, i.e. all
    endpoints are still subject to change.
  contact:
    name: GitHub Issues
    url: "https://github.com/Nijin22/unnamed-finance-manager/issues"
servers:
  - url: "/"
    description: "THIS server"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    BadFormat:
      description: >
        The data in the request body does not follow this endpoints schema.
        Additional details about the exact type of error MIGHT be provided in an error message.
    BadAuthentication:
      description: >
        This endpoint requires authentication and it failed for some reason.
        You can get a (new) token from the `/v1.0/authenticate` endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg:
                type: string
              errorId:
                type: string
                enum:
                  - NO_TOKEN_PROVIDED
                  - TOKEN_NOT_VALID
    NotFound:
      description: "The requested resource could not be found"
  schemas:
    CurrencyId:
      type: integer
      description: "Unique identifier for a currency"
      example: 1
    CurrencyBase:
      type: object
      properties:
        shortName:
          type: string
          example: "€"
          maxLength: 255
        fullName:
          type: string
          example: "Euro"
          maxLength: 255
        fractionalName:
          type: string
          example: "Cent"
          maxLength: 255
        decimalPlaces:
          type: integer
          example: 2
          maximum: 15
    CurrencyRelativeValue:
      type: number
      example: 1.0
      description: >
        In Unfima all currencies can be converted to each other.
        Their relation is set by this relative value.
        The very first currency of a user is *highly* recommended to have a relative value of `1`.
        <br><br>
        Example: Your first currency is EUR, with a relative value of '1'.
        Later you add USD and set their relative value to '0.91'.
        If you then change the display currency to USD, your transaction for 25 EUR will show up with a
        "equivalent value" of `25 * (1/0.91) = 27.47 USD`
    CurrencyToReturn:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/CurrencyId'
        - $ref: '#/components/schemas/CurrencyBase'
        - type: object
          properties:
            currentRelativeValue:
              $ref: '#/components/schemas/CurrencyRelativeValue'
    AccountId:
      type: integer
      description: "Unique identifier for a account"
      example: 1
    AccountName:
      type: string
      description: "User-chosen account name"
      example: "XYZ Bank - Savings account"
      maxLength: 255
    AccountBelongsToUserFlag:
      type: boolean
      description: >
        Unfima users can create accounts they own and accounts of third
        parties, like the supermarket they shop at. If the balance of this
        account should be included in the users wealth, this should be set
        to 'true'.
      example: true
    AccountBase:
      type: object
      properties:
        currencyId:
          $ref: '#/components/schemas/CurrencyId'
        accountName:
          $ref: '#/components/schemas/AccountName'
        belongsToUser:
          $ref: '#/components/schemas/AccountBelongsToUserFlag'
        notes:
          type: string
          description: >
            User-chosen additional infos about this account.
            Can also be an empty string.
            Some applications might render the content as markdown.
          example: >
            **IBAN**: DE75512108001245126199,
            **Support phone number**: +49 1234 5678900
          maxLength: 16777215
    AccountToReturn:
      allOf:
        - type: object
          properties:
            accountId:
              $ref: '#/components/schemas/AccountId'
        - $ref: '#/components/schemas/AccountBase'
        - type: object
          properties:
            currencyName:
              type: string
              description: "The 'shortName' of the used currency"
              example: "€"
            currentBalance:
              type: number
              description: >
                The current balance / worth of this account as
                determined by summing up all balance changes linked
                to this account.
                Might also be negative for accounts that are in dept.
                <br>
                The balance also exists for third-party accounts,
                but the number does not hold much usefullness
                as it obviously misses transactions by other people.
              example: "1234.56"
    TransactionId:
      type: integer
      description: "Unique identifier for a transaction"
    TransactionBase:
      type: object
      properties:
        transactionName:
          type: string
          description: "User-provided text to describe the transaction"
          maxLength: 255
          example: "Buying groceries"
        timestamp:
          type: integer
          description: "The unix timestamp (in seconds) when this transaction happened"
          maximum: 9223372036854775807
        notes:
          type: string
          description: >
            User-provided additional text about this transaction.
            Might be an empty string.
            Some applications might render the content as markdown.
          maxLength: 16777215
          example: >
            * Apples\n
            * Toilet paper\n
            * Cookies (Do **NOT** eat. For Jane's birthday!)\n
    BalanceChangeId:
      type: integer
      description: "Unique identifier for a balance change"
    BalanceChangeBase:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        value:
          type: number
          description: >
            The value of the balance change.
            The currency of this value is determined by the currency of the
            linked account (by `accountId`).
          example: "3.14"
    BalanceChangeInTransaction:
      type: object
      properties:
        accountId:
          $ref: '#/components/schemas/AccountId'
        accountName:
          $ref: '#/components/schemas/AccountName'
        belongsToUser:
          $ref: '#/components/schemas/AccountBelongsToUserFlag'
        value:
          type: number
          description: >
            The amount added to or removed from this account.
        currencyName:
          type: string
          description: "The shortName used for the affected account"

security:
  - bearerAuth: []
paths:
  /v1.0/users:
    post:
      summary: "Create new user account"
      description: >
        Creates a new user account with login credentials (email & password) and a starter currency.
      tags:
        - User Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "User accounts are uniquely identified by this email address"
                  example: "john.doe@example.org"
                  maxLength: 255
                password:
                  type: string
                  description: >
                    A password the user will use in future to authenticate.<br><br>
                    The password ist limited to 100 characters to reduce DOS attack possibilities.
                    That said, 100 characters should be good enough for a secure password.<br><br>
                    The API doesn't check for secure passwords.
                    We suggest clients check the [haveibeenpwned API](https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange).
                  example: "w237P7jnph9H7vkkxpKE"
                  maxLength: 100
                starterCurrency:
                  allOf:
                    - $ref: '#/components/schemas/CurrencyBase'
                    - type: object
                      required:
                        - shortName
                        - fullName
                        - fractionalName
                        - decimalPlaces
      responses:
        "201":
          description: "The new user account was created."
        "400":
          $ref: '#/components/responses/BadFormat'
        "409":
          description: "The account couldn't be created, because the email address is already in use."
  /v1.0/authenticate:
    post:
      summary: "Authenticate an existing account"
      security: []
      tags:
        - User Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@example.org"
                  maxLength: 255
                password:
                  type: string
                  description: "The user's password "
                  example: "w237P7jnph9H7vkkxpKE"
                  maxLength: 100
                client:
                  type: string
                  description: >
                    A identifier for this client. Should include the application name and
                    may include a user-chosen identifier
                  example: "Unfima WebApp on 'Work-Computer'"
      responses:
        "200":
          description: "Authentication successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  bearerToken:
                    type: string
                    description: >
                      A random string that is used to authenticate further calls.
                      For all endpoints, that require authentication, send this string as part of the
                      `Authorization` header.
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          description: >
            Authentication failed as either the username was unknown,
            or the password didn't match the username.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: "The authentication method that should be used"
              example: Bearer realm="Unfima API"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg:
                    type: string
                  errorId:
                    type: string
                    enum:
                      - "USERNAME_UNKNOWN"
                      - "PASSWORD_DOES_NOT_MATCH"
  /v1.0/users/me:
    get:
      summary: "Basic info about the current user"
      tags:
        - User Accounts
      responses:
        "200":
          description: "Basic info about the current user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                    example: "john.doe@example.org"
        "401":
          $ref: '#/components/responses/BadAuthentication'
  /v1.0/currencies:
    post:
      summary: Create new currency
      tags:
        - Currencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CurrencyBase'
                - type: object
                  properties:
                    starterRelativeValue:
                      $ref: '#/components/schemas/CurrencyRelativeValue'
                  required:
                    - shortName
                    - fullName
                    - fractionalName
                    - decimalPlaces
                    - starterRelativeValue
      responses:
        "201":
          description: "Currency succesfully created"
          content:
            application/json:
              schema:
                description: The ID of the newly created currency
                type: integer
                example: 1
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
    get:
      summary: "All currencies"
      tags:
        - Currencies
      responses:
        "200":
          description: "All currencies of this user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
  /v1.0/currencies/{currencyId}:
    parameters:
      - name: currencyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CurrencyId'
    get:
      summary: Info about this currency
      tags:
        - Currencies
      responses:
        "200":
          description: "Info about this currency"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      summary: Modify this currency
      description: >
        All *submitted* attributes  will be updated.
        I.e. if you only want to change the 'shot name', submit a json map that only contains 'shortName' and nothing else.
      tags:
        - Currencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CurrencyBase'
      responses:
        "204":
          description: "Currency changed successfully"
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
        "404":
          $ref: '#/components/responses/NotFound'
  /v1.0/accounts:
    post:
      summary: Create new account
      tags:
        - Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/AccountBase'
                - type: object
                  required:
                    - currencyId
                    - accountName
                    - belongsToUser
                    - notes
      responses:
        "201":
          description: "Account successfully created"
          content:
            application/json:
              schema:
                description: The ID of the newly created currency
                type: integer
                example: 1
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
    get:
      summary: List all accounts
      tags:
        - Accounts
      parameters:
        - name: onlyBelongingAccounts
          in: query
          required: false
          description: >
            Set to `true` if the results should only contain accounts that are
            owned by the user. (I. e. filter out third-party accounts.)
            Setting both `onlyBelongingAccounts` and `onlyThirdPartyAccounts` to
            true will result in an empty set.
          schema:
            type: boolean
            default: false
        - name: onlyThirdPartyAccounts
          in: query
          required: false
          description: >
            Set to `true` if the results should only contain accounts that are
            NOT owned by the user. (I. e. only show third-party accounts.)
            Setting both `onlyBelongingAccounts` and `onlyThirdPartyAccounts` to
            true will result in an empty set.
          schema:
            type: boolean
            default: false
      responses:
        "201":
          description: "List of accounts"
          content:
            application/json:
              schema:
                description: >
                  A list of all accounts belonging to this user, with additional
                  aggrated data for these accounts.
                type: array
                items:
                  $ref: '#/components/schemas/AccountToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
  /v1.0/accounts/{accountId}:
    get:
      summary: Info about this account
      tags:
        - Accounts
      parameters:
        - name: accountId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/AccountId'
      responses:
        "201":
          description: "Infos about a given account"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
        "404":
          $ref: '#/components/responses/NotFound'
  /v1.0/transactions:
    post:
      summary: Create new transaction
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/TransactionBase'
                - type: object
                  properties:
                    balanceChanges:
                      type: array
                      items:
                        $ref: '#/components/schemas/BalanceChangeBase'
                      description: >
                        List of all balance changes in this transaction.
                        For each used currency, the sum of all `value`s in this
                        list must equal 0.
                  required:
                    - transactionName
                    - timestamp
                    - notes
                    - balanceChanges
              example:
                transactionName: "Buying groceries"
                timestamp: 1581711070
                notes: ""
                balanceChanges:
                  - accountId: 123
                    value: 13.37
                  - accountId: 456
                    value: -10
                  - accountId: 789
                    value: -3.37
      responses:
        "201":
          description: "Transaction successfully created"
          content:
            application/json:
              schema:
                description: The ID of the newly created transaction
                type: integer
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
    get:
      summary: All transactions
      tags:
        - Transactions
      responses:
        "200":
          description: List all transactions for authenticated user
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                    - type: object
                      properties:
                        transactionId:
                          $ref: '#/components/schemas/TransactionId'
                    - $ref: '#/components/schemas/TransactionBase'
                    - type: object
                      properties:
                        inputAccounts:
                          type: array
                          description: Accounts that lost money during this transaction
                          items:
                            $ref: '#/components/schemas/BalanceChangeInTransaction'
                          example:
                            - accountId: 111
                              accountName: "Supermarket Coupons"
                              belongsToUser: true
                              value: 5
                              currencyName: "€"
                            - accountId: 222
                              accountName: "Wallet - Cash"
                              belongsToUser: true
                              value: 20.75
                              currencyName: "€"
                        outputAccounts:
                          type: array
                          description: Accounts that gained money during this transaction
                          items:
                            $ref: '#/components/schemas/BalanceChangeInTransaction'
                          example:
                            accountId: 555
                            accountName: "Example Supermarket"
                            belongsToUser: false
                            value: 25.75
                            currencyName: "€"
                        values:
                          type: object
                          description: "Map of currency-short-names to their respective transfered values"
                          additionalProperties:
                            type: number
                          example:
                            "€": 25.75
        "401":
          $ref: '#/components/responses/BadAuthentication'
