openapi: 3.0.0
info:
  title: Unfima API
  version: 1.0-SNAPSHOT
  description: >-
    The current work-in-progression API documentation for the finance manager
    Unfima. This version of the documentation is a "SNAPSHOT" version, i.e. all
    endpoints are still subject to change.
  contact:
    name: GitHub Issues
    url: "https://github.com/Nijin22/unnamed-finance-manager/issues"
servers:
  - url: "/"
    description: "THIS server"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
  responses:
    BadFormat:
      description: >
        The data in the request body does not follow this endpoints schema.
        Additional details about the exact type of error MIGHT be provided in an error message.
    BadAuthentication:
      description: >
        This endpoint requires authentication and it failed for some reason.
        You can get a (new) token from the `/v1.0/authenticate` endpoint.
      content:
        application/json:
          schema:
            type: object
            properties:
              errorMsg:
                type: string
              errorId:
                type: string
                enum:
                  - NO_TOKEN_PROVIDED
                  - TOKEN_NOT_VALID
    NotFound:
      description: "The requested resource could not be found"
  schemas:
    CurrencyId:
      type: integer
      description: "Unique identifier for a currency"
      example: 1
    CurrencyBase:
      type: object
      properties:
        shortName:
          type: string
          example: "â‚¬"
          maxLength: 255
        fullName:
          type: string
          example: "Euro"
          maxLength: 255
        fractionalName:
          type: string
          example: "Cent"
          maxLength: 255
        decimalPlaces:
          type: integer
          example: 2
          maximum: 15
    CurrencyRelativeValue:
      type: number
      example: 1.0
      description: >
        In Unfima all currencies can be converted to each other.
        Their relation is set by this relative value.
        The very first currency of a user is *highly* recommended to have a relative value of `1`.
        <br><br>
        Example: Your first currency is EUR, with a relative value of '1'.
        Later you add USD and set their relative value to '0.91'.
        If you then change the display currency to USD, your transaction for 25 EUR will show up with a
        "equivalent value" of `25 * (1/0.91) = 27.47 USD`
    CurrencyToReturn:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/CurrencyId'
        - $ref: '#/components/schemas/CurrencyBase'
        - type: object
          properties:
            currentRelativeValue:
              $ref: '#/components/schemas/CurrencyRelativeValue'
security:
  - bearerAuth: []
paths:
  /v1.0/users:
    post:
      summary: "Create a new user account"
      security: []
      tags:
        - User Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: "User accounts are uniquely identified by this email address"
                  example: "john.doe@example.org"
                  maxLength: 255
                password:
                  type: string
                  description: >
                    A password the user will use in future to authenticate.<br><br>
                    The password ist limited to 100 characters to reduce DOS attack possibilities.
                    That said, 100 characters should be good enough for a secure password.<br><br>
                    The API doesn't check for secure passwords.
                    We suggest clients check the [haveibeenpwned API](https://haveibeenpwned.com/API/v2#SearchingPwnedPasswordsByRange).
                  example: "w237P7jnph9H7vkkxpKE"
                  maxLength: 100
      responses:
        "201":
          description: "The new user account was created."
        "400":
          $ref: '#/components/responses/BadFormat'
        "409":
          description: "The account couldn't be created, because the email address is already in use."
  /v1.0/authenticate:
    post:
      summary: "Authenticate an existing account"
      security: []
      tags:
        - User Accounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: "john.doe@example.org"
                  maxLength: 255
                password:
                  type: string
                  description: "The user's password "
                  example: "w237P7jnph9H7vkkxpKE"
                  maxLength: 100
                client:
                  type: string
                  description: >
                    A identifier for this client. Should include the application name and
                    may include a user-chosen identifier
                  example: "Unfima WebApp on 'Work-Computer'"
      responses:
        "200":
          description: "Authentication successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  bearerToken:
                    type: string
                    description: >
                      A random string that is used to authenticate further calls.
                      For all endpoints, that require authentication, send this string as part of the
                      `Authorization` header.
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          description: >
            Authentication failed as either the username was unknown,
            or the password didn't match the username.
          headers:
            WWW-Authenticate:
              schema:
                type: string
              description: "The authentication method that should be used"
              example: Bearer realm="Unfima API"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errorMsg:
                    type: string
                  errorId:
                    type: string
                    enum:
                      - "USERNAME_UNKNOWN"
                      - "PASSWORD_DOES_NOT_MATCH"
  /v1.0/users/me:
    get:
      summary: "Basic info about the current user"
      tags:
        - User Accounts
      responses:
        "200":
          description: "Basic info about the current user"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  email:
                    type: string
                    example: "john.doe@example.org"
        "401":
          $ref: '#/components/responses/BadAuthentication'
  /v1.0/currencies:
    post:
      summary: Create new currency
      tags:
        - Currencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/CurrencyBase'
                - type: object
                  properties:
                    starterRelativeValue:
                      $ref: '#/components/schemas/CurrencyRelativeValue'
                  required:
                    - shortName
                    - fullName
                    - fractionalName
                    - decimalPlaces
                    - starterRelativeValue
      responses:
        "201":
          description: "Currency succesfully created"
          content:
            application/json:
              schema:
                description: The ID of the newly created currency
                type: integer
                example: 1
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
    get:
      summary: "All currencies"
      tags:
        - Currencies
      responses:
        "200":
          description: "All currencies of this user"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CurrencyToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
  /v1.0/currencies/{currencyId}:
    parameters:
      - name: currencyId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/CurrencyId'
    get:
      summary: Info about this currency
      tags:
        - Currencies
      responses:
        "200":
          description: "Info about this currency"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CurrencyToReturn'
        "401":
          $ref: '#/components/responses/BadAuthentication'
        "404":
          $ref: '#/components/responses/NotFound'
    put:
      summary: Modify this currency
      tags:
        - Currencies
      requestBody:
        required: true
        content:
          application/json:
            schema:
              allOf:
                - type: object
                  properties:
                    id:
                      $ref: '#/components/schemas/CurrencyId'
                - $ref: '#/components/schemas/CurrencyBase'
              required:
                - id
      responses:
        "204":
          description: "Currency changed succefully"
        "400":
          $ref: '#/components/responses/BadFormat'
        "401":
          $ref: '#/components/responses/BadAuthentication'
        "404":
          $ref: '#/components/responses/NotFound'
